@implements IDisposable

@inject TorontoOnlineServersStore TorontoOnlineServersStore

<div class="col">
    <div class="@($"card{IsActive(SelectedCity, City)}")">
        <img style="max-width: 150px; max-height: 150px"
             class="card-img-top"
             src="@($"/images/{City}.png")"
             alt="Card image cap">
        <div class="card-body">
            <button type="button" class="btn btn-primary"
                    @onclick="@(async () => await SelectCityAsync(City))">@City</button>
        </div>
        <div>
            @if (City.Equals("Toronto", StringComparison.OrdinalIgnoreCase))
            {
                <text>@NumberOfOnlineTorontoServers</text>
            }
        </div>
    </div>
</div>

@code {
    private int NumberOfOnlineTorontoServers;
    
    [Parameter] public string SelectedCity { get; set; } = string.Empty;
    [Parameter] public string City { get; set; } = string.Empty;

    [Parameter] public EventCallback<string> SelectCityCallback { get; set; }

    protected override bool ShouldRender()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"CityComponent: {nameof(ShouldRender)} : {guid}");

        base.ShouldRender();
        return true;
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"CityComponent: {nameof(SetParametersAsync)} : {guid}");

        await base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"CityComponent: {nameof(OnInitialized)} : {guid}");
    }

    protected override void OnParametersSet()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"CityComponent: {nameof(OnParametersSet)} : {guid}");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        NumberOfOnlineTorontoServers = TorontoOnlineServersStore.GetNumberOfOnlineServers();
        TorontoOnlineServersStore.AddStateChangeListeners(OnServerStatusChange);
        StateHasChanged();
    }

    public void Dispose()
    {
        TorontoOnlineServersStore.RemoveStateChangeListeners(OnServerStatusChange);
    }
    
    private async Task SelectCityAsync(string city)
    {
        await SelectCityCallback.InvokeAsync(city);
    }

    private static string IsActive(string currentCity, string cityName) =>
        currentCity.Equals(cityName, StringComparison.InvariantCultureIgnoreCase) ? " border-primary" : string.Empty;

    private void OnServerStatusChange()
    {
        NumberOfOnlineTorontoServers = TorontoOnlineServersStore.GetNumberOfOnlineServers();
        StateHasChanged();
    }
}