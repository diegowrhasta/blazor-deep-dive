@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore
@inject IServersEfCoreRepository ServersRepository

@if (Server is null)
{
    return;
}

<tr style="background-color: @GetBackgroundColor()" @key="Server.Id">
    <td>
        @Server.Name
    </td>
    <td>
        @Server.City
    </td>
    <td style="color: @(Server.IsOnline ? "green" : "red")">
        @(Server.IsOnline ? "online" : "offline")
    </td>
    <td>
        @if (Server.IsOnline)
        {
            <text>@(GetRandomPeopleNumber())</text>
        }
        else
        {
            <text>N/A</text>
        }
    </td>
    <td>
        <button class="@($"ms-2 btn btn-outline-{CalculateButtonType(Server.IsOnline)}")" @onclick="UpdateServerStatusAsync">
            @(CalculateButtonText(Server.IsOnline))
        </button>
        <a href="/server/@Server.Id" class="btn btn-outline-primary">Edit</a>
    </td>
    <td>
        <EditForm
            style="@($"background-color: {GetBackgroundColor()}")"
            Model="Server"
            FormName="@($"Server-{Server.Id}-form")"
            OnValidSubmit="@(async () => await DeleteServerAsync(Server))">
            <button type="submit" class="btn btn-primary">
                Delete
            </button>
        </EditForm>
    </td>
</tr>

@code {
    [Parameter] public Server? Server { get; set; }

    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectedCity { get; set; }

    private string GetBackgroundColor()
    {
        return SelectedCity switch
        {
            "Toronto" => "powderblue",
            "Montreal" => "lightgray",
            "Ottawa" => "palegreen",
            "Calgary" => "pink",
            _ => "white"
        };
    }

    private static string GetRandomPeopleNumber()
    {
        var randomInt = new Random().Next(minValue: 1, maxValue: 15);

        return $" ({randomInt})";
    }

    private static string CalculateButtonType(bool isOnline) => !isOnline
        ? "success"
        : "danger";

    private static string CalculateButtonText(bool isOnline) => isOnline
        ? "Turn Off"
        : "Turn On";

    private async Task UpdateServerStatusAsync()
    {
        if (Server is null)
        {
            return;
        }

        var status = Server.IsOnline = !Server.IsOnline;
        await ServersRepository.UpdateServerAsync(Server.Id, Server);

        if ((Server.City ?? string.Empty).Equals("Toronto", StringComparison.OrdinalIgnoreCase))
        {
            var torontoServerNumber = TorontoOnlineServersStore.GetNumberOfOnlineServers();

            if (status)
            {
                TorontoOnlineServersStore.SetNumberOfOnlineServers(++torontoServerNumber);
            }
            else if (torontoServerNumber >= 1)
            {
                TorontoOnlineServersStore.SetNumberOfOnlineServers(--torontoServerNumber);
            }
        }
    }

    private async Task DeleteServerAsync(Server server)
    {
        if (server.Id <= 0)
        {
            return;
        }

        await ServersRepository.DeleteServerAsync(server.Id);
        // Servers = ServersRepository.GetServersByCity("Toronto");
        NavigationManager.Refresh(forceReload: true);
    }

}