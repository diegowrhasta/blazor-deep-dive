<table class="table table-striped">
    <RepeaterComponent Items="servers">
        <Header>
            <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    City
                </th>
                <th>
                    Status
                </th>
                <th>
                    People Online
                </th>
                <th></th>
                <th></th>
            </tr>
            </thead>
        </Header>
        <Row Context="server">
            <ServerComponent Server="server"></ServerComponent>
        </Row>
    </RepeaterComponent>
</table>

@code {
    [Parameter] public string? CityName { get; set; }
    [Parameter] public string? SearchCity { get; set; }

    private readonly string FALLBACK_CITY = "Toronto";
    private List<Server> servers = [];
    public Timer? Timer { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>("CityName", out var cityName))
        {
            if (cityName != CityName)
            {
                base.SetParametersAsync(parameters);
            }
        }

        if (parameters.TryGetValue<string>("SearchFilter", out var searchFilter))
        {
            if (searchFilter != SearchCity)
            {
                base.SetParametersAsync(parameters);
            }
        }

        return Task.CompletedTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender)
        {
            return;
        }

        Timer = new Timer(_ => { base.InvokeAsync(StateHasChanged); }, state: null, dueTime: 2000, period: 2000);
    }

    protected override void OnParametersSet()
    {
        PopulateCities();
    }

    private void PopulateCities()
    {
        if (!string.IsNullOrWhiteSpace(SearchCity))
        {
            servers = ServersRepository.SearchServers(SearchCity!);
            return;
        }

        servers = ServersRepository.GetServersByCity(CityName ?? FALLBACK_CITY);
        StateHasChanged();
    }

}