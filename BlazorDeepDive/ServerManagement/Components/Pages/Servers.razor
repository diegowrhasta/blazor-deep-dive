@page "/servers"

@inject NavigationManager NavigationManager

<h3>Servers</h3>
<br/>
<br/>
<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="@($"card{IsActive(selectedCity, city)}")">
                    <img style="max-width: 150px; max-height: 150px"
                         class="card-img-top"
                         src="@($"/images/{city}.png")"
                         alt="Card image cap">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary"
                                @onclick="@(() => SelectCity(city))">@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<br/>

<div class="input-group mb-3">
    <input
        type="text" class="form-control"
        placeholder="Search Servers"
        @bind-value="serverFilter"
        @bind-value:event="oninput">
    <button class="btn btn-outline-secondary" type="button" id="search-button" @onclick="HandleSearch">Search</button>
</div>
<br/>

<ul>
    <Virtualize Items="servers" Context="server">
        <li @key="server.Id">
            @server.Name in @server.City is
            <span style="color: @(server.IsOnline ? "green" : "red")">
                @(server.IsOnline ? "online" : "offline")
            </span>
            <a href="/servers/edit/@server.Id" class="btn btn-link">Edit</a>
            <EditForm
                Model="server"
                FormName="@($"server-{server.Id}-form")"
                OnValidSubmit="@(() => DeleteServer(server))">
                <button type="submit" class="btn btn-primary">
                    Delete
                </button>
            </EditForm>
        </li>
    </Virtualize>
</ul>
<a href="/servers/add" class="btn btn-primary">Add Server</a>

@code {
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");
    private List<string> cities = CitiesRepository.Cities;
    private string selectedCity = "Toronto";

    private string _serverFilter = string.Empty;

    private string serverFilter
    {
        get => _serverFilter;
        set
        {
            // Logic before or after
            _serverFilter = value;
            servers = ServersRepository.SearchServers(serverFilter);
        }
    }

    private void DeleteServer(Server server)
    {
        if (server.Id <= 0)
        {
            return;
        }

        ServersRepository.DeleteServer(server.Id);
        // servers = ServersRepository.GetServersByCity("Toronto");
        NavigationManager.Refresh();
    }

    private void SelectCity(string cityName)
    {
        selectedCity = cityName;
        servers = ServersRepository.GetServersByCity(cityName);
    }

    private static string IsActive(string currentCity, string cityName) =>
        currentCity.Equals(cityName, StringComparison.InvariantCultureIgnoreCase) ? " border-primary" : string.Empty;

    private void HandleSearch()
    {
        selectedCity = string.Empty;
    }

}