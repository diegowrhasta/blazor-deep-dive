@page "/servers"
@page "/servers/back-from/{previousCityName}"

@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@

@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore
@inject IServersEfCoreRepository ServersRepository

@* @attribute [ExcludeFromInteractiveRouting] *@

<h3>Servers</h3>
<br/>
<br/>
<CityListComponent SelectedCity="@CityName" @ref="CityListComponent"
                   SelectCityCallback="HandleSelectedCity"></CityListComponent>
<br/>

<SearchBarComponent @ref="SearchBarComponent" OnSearchCallback="HandleSearch"></SearchBarComponent>
<br/>

<CascadingValue Name="SelectedCity" Value="@CityName">
    <ServerListComponent CityName="@CityName" SearchCity="@SearchName"></ServerListComponent>
</CascadingValue>

<a href="/server" class="btn btn-primary">Add Server</a>

@code {
    [Parameter] public string? PreviousCityName { get; set; }
    private SearchBarComponent SearchBarComponent = null!;
    private CityListComponent CityListComponent = null!;
    private string CityName { get; set; } = "Toronto";
    private string SearchName { get; set; } = string.Empty;

    private void HandleSelectedCity(string cityName)
    {
        SearchBarComponent.ClearSearchFilter();
        SearchName = string.Empty;
        CityName = cityName;
    }

    private void HandleSearch(string searchName)
    {
        CityListComponent.ClearSelection();
        CityName = string.Empty;
        SearchName = searchName;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        if (NavigationManager.Uri.Contains("back-from") && string.IsNullOrWhiteSpace(PreviousCityName))
        {
            return;
        }

        CityName = PreviousCityName ?? "Toronto";

        var torontoServers = await ServersRepository.GetServersByCityAsync(CityName);

        TorontoOnlineServersStore.SetNumberOfOnlineServers(torontoServers.Count(x => x.IsOnline));

        StateHasChanged();
    }

}