@page "/servers/edit/{id:int}"

@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

@* <NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" *@
@*                 ConfirmExternalNavigation="true"></NavigationLock> *@

<h3>Edit Server</h3>
<br/>

@if (_server is null)
{
    return;
}

<EditForm Model="_server" FormName="formServer" OnValidSubmit="Submit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <InputNumber hidden="true" @bind-Value="@_server.Id"></InputNumber>
    <FieldComponent Label="Name">
        <Control>
            <InputText class="form-control" @bind-Value="_server.Name"></InputText>
        </Control>
        <ValidationControl>
            <ValidationMessage For="() => _server.Name"></ValidationMessage>
        </ValidationControl>
    </FieldComponent>

    <FieldComponent Label="City">
        <Control>
            <InputText class="form-control" @bind-Value="_server.City"></InputText>
        </Control>
        <ValidationControl>
            <ValidationMessage For="() => _server.City"></ValidationMessage>
        </ValidationControl>
    </FieldComponent>

    <FieldComponent Label="Online">
        <Control>
            <InputCheckbox class="form-check-input" @bind-Value="_server.IsOnline"></InputCheckbox>
        </Control>
    </FieldComponent>

    <br/>
    <button class="btn btn-primary" type="submit">Update</button>
    <a href="/servers" class="btn btn-primary ">Go Back</a>
</EditForm>

@code {
    [Parameter] public int Id { get; set; }

    [SupplyParameterFromForm(FormName = "formServer")]
    private Server? _server { get; set; }

    private void Submit()
    {
        if (_server is null)
        {
            return;
        }

        ServersRepository.UpdateServer(_server.Id, _server);
        NavigationManager.NavigateTo($"/servers/back-from/{_server?.City}");
    }

    protected override void OnParametersSet()
    {
        _server ??= ServersRepository.GetServerById(Id);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var isConfirmed = await JSRuntime.InvokeAsync<bool>(identifier: "confirm", "Are you sure you want to leave this page?");
        if (!isConfirmed)
        {
            context.PreventNavigation();
        }
    }

}